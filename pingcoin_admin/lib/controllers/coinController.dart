import 'dart:html' as html;

import 'package:flutter/cupertino.dart';
import 'package:get/get.dart';
import 'package:pingcoin_admin/models/coinModel.dart';
import 'package:pingcoin_admin/services/coinService.dart';

class CoinController extends GetxController {
  List<String> _coinCategories = [];

  List<String> get coinCategories => _coinCategories;

  bool _isLoading=false;
  bool get isLoading=>_isLoading;

  TextEditingController searchController = TextEditingController();

  List<String> _countryCodes = [
    "ğŸ‡¦ğŸ‡« AF - Afghanistan",
    "ğŸ‡¦ğŸ‡± AL - Albania",
    "ğŸ‡©ğŸ‡¿ DZ - Algeria",
    "ğŸ‡¦ğŸ‡© AD - Andorra",
    "ğŸ‡¦ğŸ‡´ AO - Angola",
    "ğŸ‡¦ğŸ‡· AR - Argentina",
    "ğŸ‡¦ğŸ‡² AM - Armenia",
    "ğŸ‡¦ğŸ‡º AU - Australia",
    "ğŸ‡¦ğŸ‡¹ AT - Austria",
    "ğŸ‡¦ğŸ‡¿ AZ - Azerbaijan",
    "ğŸ‡§ğŸ‡­ BH - Bahrain",
    "ğŸ‡§ğŸ‡© BD - Bangladesh",
    "ğŸ‡§ğŸ‡¾ BY - Belarus",
    "ğŸ‡§ğŸ‡ª BE - Belgium",
    "ğŸ‡§ğŸ‡· BR - Brazil",
    "ğŸ‡¨ğŸ‡¦ CA - Canada",
    "ğŸ‡¨ğŸ‡³ CN - China",
    "ğŸ‡¨ğŸ‡´ CO - Colombia",
    "ğŸ‡¨ğŸ‡¿ CZ - Czech Republic",
    "ğŸ‡©ğŸ‡° DK - Denmark",
    "ğŸ‡ªğŸ‡¬ EG - Egypt",
    "ğŸ‡«ğŸ‡· FR - France",
    "ğŸ‡©ğŸ‡ª DE - Germany",
    "ğŸ‡¬ğŸ‡­ GH - Ghana",
    "ğŸ‡¬ğŸ‡· GR - Greece",
    "ğŸ‡­ğŸ‡° HK - Hong Kong",
    "ğŸ‡®ğŸ‡³ IN - India",
    "ğŸ‡®ğŸ‡© ID - Indonesia",
    "ğŸ‡®ğŸ‡· IR - Iran",
    "ğŸ‡®ğŸ‡¶ IQ - Iraq",
    "ğŸ‡®ğŸ‡¹ IT - Italy",
    "ğŸ‡¯ğŸ‡µ JP - Japan",
    "ğŸ‡¯ğŸ‡´ JO - Jordan",
    "ğŸ‡°ğŸ‡ª KE - Kenya",
    "ğŸ‡°ğŸ‡¼ KW - Kuwait",
    "ğŸ‡±ğŸ‡¦ LA - Laos",
    "ğŸ‡±ğŸ‡§ LB - Lebanon",
    "ğŸ‡²ğŸ‡¾ MY - Malaysia",
    "ğŸ‡²ğŸ‡» MV - Maldives",
    "ğŸ‡²ğŸ‡½ MX - Mexico",
    "ğŸ‡²ğŸ‡¦ MA - Morocco",
    "ğŸ‡³ğŸ‡µ NP - Nepal",
    "ğŸ‡³ğŸ‡± NL - Netherlands",
    "ğŸ‡³ğŸ‡¿ NZ - New Zealand",
    "ğŸ‡³ğŸ‡¬ NG - Nigeria",
    "ğŸ‡³ğŸ‡´ NO - Norway",
    "ğŸ‡´ğŸ‡² OM - Oman",
    "ğŸ‡µğŸ‡° PK - Pakistan",
    "ğŸ‡µğŸ‡ª PE - Peru",
    "ğŸ‡µğŸ‡­ PH - Philippines",
    "ğŸ‡µğŸ‡± PL - Poland",
    "ğŸ‡¶ğŸ‡¦ QA - Qatar",
    "ğŸ‡·ğŸ‡´ RO - Romania",
    "ğŸ‡·ğŸ‡º RU - Russia",
    "ğŸ‡¸ğŸ‡¦ SA - Saudi Arabia",
    "ğŸ‡¸ğŸ‡¬ SG - Singapore",
    "ğŸ‡¿ğŸ‡¦ ZA - South Africa",
    "ğŸ‡ªğŸ‡¸ ES - Spain",
    "ğŸ‡±ğŸ‡° LK - Sri Lanka",
    "ğŸ‡¸ğŸ‡ª SE - Sweden",
    "ğŸ‡¨ğŸ‡­ CH - Switzerland",
    "ğŸ‡¹ğŸ‡­ TH - Thailand",
    "ğŸ‡¹ğŸ‡· TR - Turkey",
    "ğŸ‡¦ğŸ‡ª AE - United Arab Emirates",
    "ğŸ‡¬ğŸ‡§ GB - United Kingdom",
    "ğŸ‡ºğŸ‡¸ US - United States",
    "ğŸ‡»ğŸ‡³ VN - Vietnam",
    "ğŸ‡¾ğŸ‡ª YE - Yemen",
  ];

  List<String> get countryCodes => _countryCodes;

  List<String> _coinDiameterUnits = ["mm", "cm", "in", "m"];

  List<String> get coinDiameterUnits => _coinDiameterUnits;

  List<String> _coinWeightUnits = ["mg", "g", "lb", "oz"];

  List<String> get coinWeightUnits => _coinWeightUnits;

  List<String> _validationList = ["Good", "Bad"];

  List<String> get validationList => _validationList;

  List<CoinModel> _allCoins=[];
  List<CoinModel> get allCoins=>_allCoins;

  List<CoinModel> _filteredCoins=[];
  List<CoinModel> get filteredCoins=>_filteredCoins;

  Map<String, List<CoinModel>> _categorizedCoins = {};
  Map<String, List<CoinModel>> get categorizedCoins =>_categorizedCoins;

  String? _selectedCategoryFilter;
  String? get selectedCategoryFilter=>_selectedCategoryFilter;

  String? _selectedCountryFilter;
  String? get selectedCountryFilter=>_selectedCountryFilter;

  setFilterCategory(String? value){
    _selectedCategoryFilter=value;
    update();
  }

  setFilterCountry(String? value){
    _selectedCountryFilter=value;
    update();
  }

  searchFilter() {

    var tempFilteredCoins = _allCoins;

    // Apply category filter if selected
    if (_selectedCategoryFilter != null) {
      tempFilteredCoins = tempFilteredCoins.where((coin) {
        return coin.category.toLowerCase() == _selectedCategoryFilter!.toLowerCase();
      }).toList();
    }

    // Apply country filter if selected
    if (_selectedCountryFilter != null) {
      tempFilteredCoins = tempFilteredCoins.where((coin) {
        return coin.country == _selectedCountryFilter!;
      }).toList();
    }

    // Apply text search filter if text is entered
    if (searchController.text.isNotEmpty) {
      tempFilteredCoins = tempFilteredCoins.where((coin) {
        return coin.name.toLowerCase().contains(searchController.text.toLowerCase()) ||
            coin.id.toLowerCase().contains(searchController.text.toLowerCase());
      }).toList();
    }

    // Update filtered coins list
    _filteredCoins = tempFilteredCoins;
    update();
  }

  setLoading(bool value){
    _isLoading=value;
    update();
  }

  addCoinToList(CoinModel _coin) {
    bool exists = _allCoins.any((coin) => coin.id == _coin.id);

    if (!exists) {
      _allCoins.add(_coin);

      String category = _coin.category;

      if (!categorizedCoins.containsKey(category)) {
        categorizedCoins[category] = [];
      }

      categorizedCoins[category]!.add(_coin);
    }

    _allCoins.sort((a, b) => b.createdAt!.compareTo(a.createdAt!));

    categorizedCoins.forEach((key, list) {
      list.sort((a, b) => b.createdAt!.compareTo(a.createdAt!));
    });

    update();
  }

  void replaceCoinInList(CoinModel updatedCoin) {

    int index = _allCoins.indexWhere((coin) => coin.id == updatedCoin.id);

    if (index != -1) {
      _allCoins[index] = updatedCoin;

      String category = updatedCoin.category;

      categorizedCoins.forEach((key, list) {
        list.removeWhere((coin) => coin.id == updatedCoin.id);
      });

      if (!categorizedCoins.containsKey(category)) {
        categorizedCoins[category] = [];
      }
      categorizedCoins[category]!.add(updatedCoin);

      _allCoins.sort((a, b) => b.createdAt!.compareTo(a.createdAt!));
      categorizedCoins.forEach((key, list) {
        list.sort((a, b) => b.createdAt!.compareTo(a.createdAt!));
      });

      update();
    } else {
      print('Coin with id ${updatedCoin.id} not found.');
    }
  }

  void removeCoinFromList(CoinModel coinModel) {
    _allCoins.removeWhere((element) => element.id==coinModel.id);
    update();
  }

  setCoinCategories(List<String> value) {
    _coinCategories.clear();
    _coinCategories = value;
    update();
  }

  getCoinCategories() {
    CoinService().getCoinCategories();
  }

  getCoins(){
    CoinService().getCoins();
  }

  Future<bool>createCoin(
    CoinModel coinModel,
    html.File coinFront,
    html.File coinBack,
    html.File coinAudio,
  ) {
    return CoinService().createCoin(coinModel, coinFront, coinBack, coinAudio);
  }

  Future<bool> updateCoin(CoinModel coinModel, html.File? coinFront, html.File? coinBack, html.File? coinAudio) {
    return CoinService().updateCoin(coinModel, coinFront, coinBack, coinAudio);
  }

   deleteCoin(CoinModel coin) {
    CoinService().deleteCoin(coin);
   }


}
